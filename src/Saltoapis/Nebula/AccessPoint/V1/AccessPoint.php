<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: salto/nebula/accesspoint/v1/access_point.proto

namespace Saltoapis\Nebula\AccessPoint\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The access point object
 *
 * Generated from protobuf message <code>salto.nebula.accesspoint.v1.AccessPoint</code>
 */
class AccessPoint extends \Google\Protobuf\Internal\Message
{
    /**
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Display name of the access point.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     */
    protected $display_name = '';
    /**
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     *
     * Generated from protobuf field <code>optional string calendar = 5;</code>
     */
    protected $calendar = null;
    protected $opening_mode;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *            Resource name of the access point. It must have the format
     *           `installations/&#42;&#47;access-points/&#42;`. For example:
     *           `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     *     @type string $display_name
     *           Display name of the access point.
     *     @type int $fixed
     *           The opening mode to be used permanently.
     *     @type string $schedule
     *           Reference to an opening mode schedule
     *     @type string $calendar
     *           Calendar reference assigned to this access point.
     *           If not set, a calendar where all days are NORMAL will be used.
     *           That's to say a regular calendar that doesn't have any
     *           HOLIDAY or OTHER days added to it.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Saltoapis\Nebula\AccessPoint\V1\AccessPoint::initOnce();
        parent::__construct($data);
    }

    /**
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     *  Resource name of the access point. It must have the format
     * `installations/&#42;&#47;access-points/&#42;`. For example:
     * `installations/surelock-homes-hq/access-points/baker-street-entrance`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Display name of the access point.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * Display name of the access point.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * The opening mode to be used permanently.
     *
     * Generated from protobuf field <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @return int
     */
    public function getFixed()
    {
        return $this->readOneof(3);
    }

    public function hasFixed()
    {
        return $this->hasOneof(3);
    }

    /**
     * The opening mode to be used permanently.
     *
     * Generated from protobuf field <code>.salto.nebula.type.OpeningMode fixed = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFixed($var)
    {
        GPBUtil::checkEnum($var, \Saltoapis\Nebula\Type\OpeningMode::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * Reference to an opening mode schedule
     *
     * Generated from protobuf field <code>string schedule = 4;</code>
     * @return string
     */
    public function getSchedule()
    {
        return $this->readOneof(4);
    }

    public function hasSchedule()
    {
        return $this->hasOneof(4);
    }

    /**
     * Reference to an opening mode schedule
     *
     * Generated from protobuf field <code>string schedule = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setSchedule($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     *
     * Generated from protobuf field <code>optional string calendar = 5;</code>
     * @return string
     */
    public function getCalendar()
    {
        return isset($this->calendar) ? $this->calendar : '';
    }

    public function hasCalendar()
    {
        return isset($this->calendar);
    }

    public function clearCalendar()
    {
        unset($this->calendar);
    }

    /**
     * Calendar reference assigned to this access point.
     * If not set, a calendar where all days are NORMAL will be used.
     * That's to say a regular calendar that doesn't have any
     * HOLIDAY or OTHER days added to it.
     *
     * Generated from protobuf field <code>optional string calendar = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setCalendar($var)
    {
        GPBUtil::checkString($var, True);
        $this->calendar = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getOpeningMode()
    {
        return $this->whichOneof("opening_mode");
    }

}

