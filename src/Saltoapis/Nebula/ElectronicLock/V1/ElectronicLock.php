<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: salto/nebula/electroniclock/v1/electronic_lock.proto

namespace Saltoapis\Nebula\ElectronicLock\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The electronic lock object
 *
 * Generated from protobuf message <code>salto.nebula.electroniclock.v1.ElectronicLock</code>
 */
class ElectronicLock extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. Resource name of the electronic lock. It must have the format of
     * `installations/&#42;&#47;electronic-locks/&#42;`. For example:
     * `installations/surelock-homes-hq/electronic-locks/dancing-men`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Display name of the electronic lock.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     */
    protected $display_name = '';
    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, electronic locks and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     */
    protected $device_id = null;
    /**
     * The access point that the electronic lock gives coverage to.
     *
     * Generated from protobuf field <code>string access_point = 6;</code>
     */
    protected $access_point = '';
    /**
     * Indicates whether this electronic lock has been initialized or not. This
     * field cannot be modified using a standard
     * [`UpdateElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.UpdateElectronicLock]
     * operation. To change the value of this field, you must call
     * [`InitializeElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.InitializeElectronicLock].
     * If the value is `false` also applies to the case where the
     * initialization process has been initiated but where it has not finished.
     *
     * Generated from protobuf field <code>bool initialized = 7;</code>
     */
    protected $initialized = false;
    /**
     * Device metadata contains information about a device hardware and firmware.
     *
     * Generated from protobuf field <code>.salto.nebula.type.DeviceMetadata device_metadata = 15;</code>
     */
    protected $device_metadata = null;
    /**
     * Indicates whether this electronic lock has pending updates or not. This
     * could be because there was a pending configuration or a firmware update
     * and is conditionally set based on the current installation settings.
     *
     * Generated from protobuf field <code>bool outdated = 8;</code>
     */
    protected $outdated = false;
    /**
     * Indicates whether this electronic lock is connected or not. It's
     * considered connected if there has been at least one communication with it
     * within the last 10 minutes. The property is left unset if it is an
     * offline electronic lock.
     *
     * Generated from protobuf field <code>optional bool connected = 9;</code>
     */
    protected $connected = null;
    /**
     * Indicates whether the battery of this electronic lock is low, and needs
     * replacing, or is normal and doesn't need replacing.
     *
     * Generated from protobuf field <code>bool low_battery = 10;</code>
     */
    protected $low_battery = false;
    /**
     * The last time an event was received.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_event_time = 11;</code>
     */
    protected $last_event_time = null;
    /**
     * Calibration settings of an electronic lock. This only applies to
     * electronic locks that must be calibrated once mounted to adapt to the
     * door's specific characteristics. For example, certain motorized
     * electronic locks need to be calibrated so they can learn the different
     * positions of a door.
     *
     * Generated from protobuf field <code>optional bytes calibration_settings = 12;</code>
     */
    protected $calibration_settings = null;
    /**
     * Indicates whether the electronic lock operates by turning in one
     * direction until it reaches the carriage end, or not.
     * For example, this could apply to electronic locks that are unaware of the
     * carriage's endpoint or those that can lose their position, as seen in
     * double clutch cylinders.
     *
     * Generated from protobuf field <code>optional bool force_rotate_carriage_end = 13;</code>
     */
    protected $force_rotate_carriage_end = null;
    /**
     * If applicable, the duration the motorized lock's hold-back latch remains
     * engaged before the latch closes.
     *
     * Generated from protobuf field <code>optional .google.protobuf.Duration hold_back_latch_duration = 14;</code>
     */
    protected $hold_back_latch_duration = null;
    protected $parent_device;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. Resource name of the electronic lock. It must have the format of
     *           `installations/&#42;&#47;electronic-locks/&#42;`. For example:
     *           `installations/surelock-homes-hq/electronic-locks/dancing-men`.
     *     @type string $display_name
     *           Display name of the electronic lock.
     *     @type string $device_id
     *           Globally unique identifier that is used across all devices manufactured
     *           by SALTO, including gateways, extenders, electronic locks and so on.
     *     @type string $gateway
     *           Parent name, when electronic lock is connected to a gateway
     *     @type string $extender
     *           Parent name, when electronic lock is connected to an extender
     *     @type string $access_point
     *           The access point that the electronic lock gives coverage to.
     *     @type bool $initialized
     *           Indicates whether this electronic lock has been initialized or not. This
     *           field cannot be modified using a standard
     *           [`UpdateElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.UpdateElectronicLock]
     *           operation. To change the value of this field, you must call
     *           [`InitializeElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.InitializeElectronicLock].
     *           If the value is `false` also applies to the case where the
     *           initialization process has been initiated but where it has not finished.
     *     @type \Saltoapis\Nebula\Type\DeviceMetadata $device_metadata
     *           Device metadata contains information about a device hardware and firmware.
     *     @type bool $outdated
     *           Indicates whether this electronic lock has pending updates or not. This
     *           could be because there was a pending configuration or a firmware update
     *           and is conditionally set based on the current installation settings.
     *     @type bool $connected
     *           Indicates whether this electronic lock is connected or not. It's
     *           considered connected if there has been at least one communication with it
     *           within the last 10 minutes. The property is left unset if it is an
     *           offline electronic lock.
     *     @type bool $low_battery
     *           Indicates whether the battery of this electronic lock is low, and needs
     *           replacing, or is normal and doesn't need replacing.
     *     @type \Google\Protobuf\Timestamp $last_event_time
     *           The last time an event was received.
     *     @type string $calibration_settings
     *           Calibration settings of an electronic lock. This only applies to
     *           electronic locks that must be calibrated once mounted to adapt to the
     *           door's specific characteristics. For example, certain motorized
     *           electronic locks need to be calibrated so they can learn the different
     *           positions of a door.
     *     @type bool $force_rotate_carriage_end
     *           Indicates whether the electronic lock operates by turning in one
     *           direction until it reaches the carriage end, or not.
     *           For example, this could apply to electronic locks that are unaware of the
     *           carriage's endpoint or those that can lose their position, as seen in
     *           double clutch cylinders.
     *     @type \Google\Protobuf\Duration $hold_back_latch_duration
     *           If applicable, the duration the motorized lock's hold-back latch remains
     *           engaged before the latch closes.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Saltoapis\Nebula\ElectronicLock\V1\ElectronicLock::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. Resource name of the electronic lock. It must have the format of
     * `installations/&#42;&#47;electronic-locks/&#42;`. For example:
     * `installations/surelock-homes-hq/electronic-locks/dancing-men`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. Resource name of the electronic lock. It must have the format of
     * `installations/&#42;&#47;electronic-locks/&#42;`. For example:
     * `installations/surelock-homes-hq/electronic-locks/dancing-men`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Display name of the electronic lock.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * Display name of the electronic lock.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, electronic locks and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     * @return string
     */
    public function getDeviceId()
    {
        return isset($this->device_id) ? $this->device_id : '';
    }

    public function hasDeviceId()
    {
        return isset($this->device_id);
    }

    public function clearDeviceId()
    {
        unset($this->device_id);
    }

    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, electronic locks and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_id = $var;

        return $this;
    }

    /**
     * Parent name, when electronic lock is connected to a gateway
     *
     * Generated from protobuf field <code>string gateway = 4;</code>
     * @return string
     */
    public function getGateway()
    {
        return $this->readOneof(4);
    }

    public function hasGateway()
    {
        return $this->hasOneof(4);
    }

    /**
     * Parent name, when electronic lock is connected to a gateway
     *
     * Generated from protobuf field <code>string gateway = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setGateway($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Parent name, when electronic lock is connected to an extender
     *
     * Generated from protobuf field <code>string extender = 5;</code>
     * @return string
     */
    public function getExtender()
    {
        return $this->readOneof(5);
    }

    public function hasExtender()
    {
        return $this->hasOneof(5);
    }

    /**
     * Parent name, when electronic lock is connected to an extender
     *
     * Generated from protobuf field <code>string extender = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setExtender($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * The access point that the electronic lock gives coverage to.
     *
     * Generated from protobuf field <code>string access_point = 6;</code>
     * @return string
     */
    public function getAccessPoint()
    {
        return $this->access_point;
    }

    /**
     * The access point that the electronic lock gives coverage to.
     *
     * Generated from protobuf field <code>string access_point = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setAccessPoint($var)
    {
        GPBUtil::checkString($var, True);
        $this->access_point = $var;

        return $this;
    }

    /**
     * Indicates whether this electronic lock has been initialized or not. This
     * field cannot be modified using a standard
     * [`UpdateElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.UpdateElectronicLock]
     * operation. To change the value of this field, you must call
     * [`InitializeElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.InitializeElectronicLock].
     * If the value is `false` also applies to the case where the
     * initialization process has been initiated but where it has not finished.
     *
     * Generated from protobuf field <code>bool initialized = 7;</code>
     * @return bool
     */
    public function getInitialized()
    {
        return $this->initialized;
    }

    /**
     * Indicates whether this electronic lock has been initialized or not. This
     * field cannot be modified using a standard
     * [`UpdateElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.UpdateElectronicLock]
     * operation. To change the value of this field, you must call
     * [`InitializeElectronicLock`][salto.nebula.electroniclock.v1.ElectronicLockService.InitializeElectronicLock].
     * If the value is `false` also applies to the case where the
     * initialization process has been initiated but where it has not finished.
     *
     * Generated from protobuf field <code>bool initialized = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setInitialized($var)
    {
        GPBUtil::checkBool($var);
        $this->initialized = $var;

        return $this;
    }

    /**
     * Device metadata contains information about a device hardware and firmware.
     *
     * Generated from protobuf field <code>.salto.nebula.type.DeviceMetadata device_metadata = 15;</code>
     * @return \Saltoapis\Nebula\Type\DeviceMetadata|null
     */
    public function getDeviceMetadata()
    {
        return $this->device_metadata;
    }

    public function hasDeviceMetadata()
    {
        return isset($this->device_metadata);
    }

    public function clearDeviceMetadata()
    {
        unset($this->device_metadata);
    }

    /**
     * Device metadata contains information about a device hardware and firmware.
     *
     * Generated from protobuf field <code>.salto.nebula.type.DeviceMetadata device_metadata = 15;</code>
     * @param \Saltoapis\Nebula\Type\DeviceMetadata $var
     * @return $this
     */
    public function setDeviceMetadata($var)
    {
        GPBUtil::checkMessage($var, \Saltoapis\Nebula\Type\DeviceMetadata::class);
        $this->device_metadata = $var;

        return $this;
    }

    /**
     * Indicates whether this electronic lock has pending updates or not. This
     * could be because there was a pending configuration or a firmware update
     * and is conditionally set based on the current installation settings.
     *
     * Generated from protobuf field <code>bool outdated = 8;</code>
     * @return bool
     */
    public function getOutdated()
    {
        return $this->outdated;
    }

    /**
     * Indicates whether this electronic lock has pending updates or not. This
     * could be because there was a pending configuration or a firmware update
     * and is conditionally set based on the current installation settings.
     *
     * Generated from protobuf field <code>bool outdated = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setOutdated($var)
    {
        GPBUtil::checkBool($var);
        $this->outdated = $var;

        return $this;
    }

    /**
     * Indicates whether this electronic lock is connected or not. It's
     * considered connected if there has been at least one communication with it
     * within the last 10 minutes. The property is left unset if it is an
     * offline electronic lock.
     *
     * Generated from protobuf field <code>optional bool connected = 9;</code>
     * @return bool
     */
    public function getConnected()
    {
        return isset($this->connected) ? $this->connected : false;
    }

    public function hasConnected()
    {
        return isset($this->connected);
    }

    public function clearConnected()
    {
        unset($this->connected);
    }

    /**
     * Indicates whether this electronic lock is connected or not. It's
     * considered connected if there has been at least one communication with it
     * within the last 10 minutes. The property is left unset if it is an
     * offline electronic lock.
     *
     * Generated from protobuf field <code>optional bool connected = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setConnected($var)
    {
        GPBUtil::checkBool($var);
        $this->connected = $var;

        return $this;
    }

    /**
     * Indicates whether the battery of this electronic lock is low, and needs
     * replacing, or is normal and doesn't need replacing.
     *
     * Generated from protobuf field <code>bool low_battery = 10;</code>
     * @return bool
     */
    public function getLowBattery()
    {
        return $this->low_battery;
    }

    /**
     * Indicates whether the battery of this electronic lock is low, and needs
     * replacing, or is normal and doesn't need replacing.
     *
     * Generated from protobuf field <code>bool low_battery = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setLowBattery($var)
    {
        GPBUtil::checkBool($var);
        $this->low_battery = $var;

        return $this;
    }

    /**
     * The last time an event was received.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_event_time = 11;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getLastEventTime()
    {
        return $this->last_event_time;
    }

    public function hasLastEventTime()
    {
        return isset($this->last_event_time);
    }

    public function clearLastEventTime()
    {
        unset($this->last_event_time);
    }

    /**
     * The last time an event was received.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_event_time = 11;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setLastEventTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->last_event_time = $var;

        return $this;
    }

    /**
     * Calibration settings of an electronic lock. This only applies to
     * electronic locks that must be calibrated once mounted to adapt to the
     * door's specific characteristics. For example, certain motorized
     * electronic locks need to be calibrated so they can learn the different
     * positions of a door.
     *
     * Generated from protobuf field <code>optional bytes calibration_settings = 12;</code>
     * @return string
     */
    public function getCalibrationSettings()
    {
        return isset($this->calibration_settings) ? $this->calibration_settings : '';
    }

    public function hasCalibrationSettings()
    {
        return isset($this->calibration_settings);
    }

    public function clearCalibrationSettings()
    {
        unset($this->calibration_settings);
    }

    /**
     * Calibration settings of an electronic lock. This only applies to
     * electronic locks that must be calibrated once mounted to adapt to the
     * door's specific characteristics. For example, certain motorized
     * electronic locks need to be calibrated so they can learn the different
     * positions of a door.
     *
     * Generated from protobuf field <code>optional bytes calibration_settings = 12;</code>
     * @param string $var
     * @return $this
     */
    public function setCalibrationSettings($var)
    {
        GPBUtil::checkString($var, False);
        $this->calibration_settings = $var;

        return $this;
    }

    /**
     * Indicates whether the electronic lock operates by turning in one
     * direction until it reaches the carriage end, or not.
     * For example, this could apply to electronic locks that are unaware of the
     * carriage's endpoint or those that can lose their position, as seen in
     * double clutch cylinders.
     *
     * Generated from protobuf field <code>optional bool force_rotate_carriage_end = 13;</code>
     * @return bool
     */
    public function getForceRotateCarriageEnd()
    {
        return isset($this->force_rotate_carriage_end) ? $this->force_rotate_carriage_end : false;
    }

    public function hasForceRotateCarriageEnd()
    {
        return isset($this->force_rotate_carriage_end);
    }

    public function clearForceRotateCarriageEnd()
    {
        unset($this->force_rotate_carriage_end);
    }

    /**
     * Indicates whether the electronic lock operates by turning in one
     * direction until it reaches the carriage end, or not.
     * For example, this could apply to electronic locks that are unaware of the
     * carriage's endpoint or those that can lose their position, as seen in
     * double clutch cylinders.
     *
     * Generated from protobuf field <code>optional bool force_rotate_carriage_end = 13;</code>
     * @param bool $var
     * @return $this
     */
    public function setForceRotateCarriageEnd($var)
    {
        GPBUtil::checkBool($var);
        $this->force_rotate_carriage_end = $var;

        return $this;
    }

    /**
     * If applicable, the duration the motorized lock's hold-back latch remains
     * engaged before the latch closes.
     *
     * Generated from protobuf field <code>optional .google.protobuf.Duration hold_back_latch_duration = 14;</code>
     * @return \Google\Protobuf\Duration|null
     */
    public function getHoldBackLatchDuration()
    {
        return $this->hold_back_latch_duration;
    }

    public function hasHoldBackLatchDuration()
    {
        return isset($this->hold_back_latch_duration);
    }

    public function clearHoldBackLatchDuration()
    {
        unset($this->hold_back_latch_duration);
    }

    /**
     * If applicable, the duration the motorized lock's hold-back latch remains
     * engaged before the latch closes.
     *
     * Generated from protobuf field <code>optional .google.protobuf.Duration hold_back_latch_duration = 14;</code>
     * @param \Google\Protobuf\Duration $var
     * @return $this
     */
    public function setHoldBackLatchDuration($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Duration::class);
        $this->hold_back_latch_duration = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getParentDevice()
    {
        return $this->whichOneof("parent_device");
    }

}

