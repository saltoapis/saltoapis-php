<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: salto/nebula/encoder/v1/encoder.proto

namespace Saltoapis\Nebula\Encoder\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The encoder object
 *
 * Generated from protobuf message <code>salto.nebula.encoder.v1.Encoder</code>
 */
class Encoder extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. Resource name of the encoder. It must have the format of
     * `installations/{@*}encoders/*`. For example:
     * `installations/surelock-homes-hq/encoders/dancing-men`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Display name of the encoder.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     */
    protected $display_name = '';
    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, encoders and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     */
    protected $device_id = null;
    /**
     * Indicates whether this encoder has been initialized or not. This
     * field cannot be modified using a standard
     * [`UpdateEncoder`][salto.nebula.encoder.v1.EncoderService.UpdateEncoder]
     * operation. To change the value of this field, you must call
     * [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder].
     * If the value is `false` also applies to the case where the
     * initialization process has been initiated but where it has not finished.
     *
     * Generated from protobuf field <code>bool initialized = 6;</code>
     */
    protected $initialized = false;
    /**
     * Device metadata contains information about a device hardware and firmware.
     *
     * Generated from protobuf field <code>.salto.nebula.type.DeviceMetadata device_metadata = 11;</code>
     */
    protected $device_metadata = null;
    /**
     * Indicates whether this encoder is connected or not. It's considered
     * connected if there has been at least one communication with it within the
     * last 10 minutes.
     *
     * Generated from protobuf field <code>bool connected = 7;</code>
     */
    protected $connected = false;
    /**
     * The last time an event was received.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_event_time = 8;</code>
     */
    protected $last_event_time = null;
    /**
     * Indicates whether this encoder has pending updates or not. This could be
     * because there was a pending configuration or a firmware update and is
     * conditionally set based on the current installation settings.
     *
     * Generated from protobuf field <code>bool outdated = 9;</code>
     */
    protected $outdated = false;
    /**
     * Disables the sound emitted by the encoder during operation.
     *
     * Generated from protobuf field <code>bool disable_sound = 10;</code>
     */
    protected $disable_sound = false;
    protected $parent_device;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. Resource name of the encoder. It must have the format of
     *           `installations/{@*}encoders/*`. For example:
     *           `installations/surelock-homes-hq/encoders/dancing-men`.
     *     @type string $display_name
     *           Display name of the encoder.
     *     @type string $device_id
     *           Globally unique identifier that is used across all devices manufactured
     *           by SALTO, including gateways, extenders, encoders and so on.
     *     @type string $gateway
     *           Parent name, when encoder is connected to a gateway
     *     @type string $extender
     *           Parent name, when encoder is connected to an extender
     *     @type bool $initialized
     *           Indicates whether this encoder has been initialized or not. This
     *           field cannot be modified using a standard
     *           [`UpdateEncoder`][salto.nebula.encoder.v1.EncoderService.UpdateEncoder]
     *           operation. To change the value of this field, you must call
     *           [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder].
     *           If the value is `false` also applies to the case where the
     *           initialization process has been initiated but where it has not finished.
     *     @type \Saltoapis\Nebula\Type\DeviceMetadata $device_metadata
     *           Device metadata contains information about a device hardware and firmware.
     *     @type bool $connected
     *           Indicates whether this encoder is connected or not. It's considered
     *           connected if there has been at least one communication with it within the
     *           last 10 minutes.
     *     @type \Google\Protobuf\Timestamp $last_event_time
     *           The last time an event was received.
     *     @type bool $outdated
     *           Indicates whether this encoder has pending updates or not. This could be
     *           because there was a pending configuration or a firmware update and is
     *           conditionally set based on the current installation settings.
     *     @type bool $disable_sound
     *           Disables the sound emitted by the encoder during operation.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Saltoapis\Nebula\Encoder\V1\Encoder::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. Resource name of the encoder. It must have the format of
     * `installations/{@*}encoders/*`. For example:
     * `installations/surelock-homes-hq/encoders/dancing-men`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. Resource name of the encoder. It must have the format of
     * `installations/{@*}encoders/*`. For example:
     * `installations/surelock-homes-hq/encoders/dancing-men`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Display name of the encoder.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * Display name of the encoder.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, encoders and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     * @return string
     */
    public function getDeviceId()
    {
        return isset($this->device_id) ? $this->device_id : '';
    }

    public function hasDeviceId()
    {
        return isset($this->device_id);
    }

    public function clearDeviceId()
    {
        unset($this->device_id);
    }

    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, encoders and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_id = $var;

        return $this;
    }

    /**
     * Parent name, when encoder is connected to a gateway
     *
     * Generated from protobuf field <code>string gateway = 4;</code>
     * @return string
     */
    public function getGateway()
    {
        return $this->readOneof(4);
    }

    public function hasGateway()
    {
        return $this->hasOneof(4);
    }

    /**
     * Parent name, when encoder is connected to a gateway
     *
     * Generated from protobuf field <code>string gateway = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setGateway($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Parent name, when encoder is connected to an extender
     *
     * Generated from protobuf field <code>string extender = 5;</code>
     * @return string
     */
    public function getExtender()
    {
        return $this->readOneof(5);
    }

    public function hasExtender()
    {
        return $this->hasOneof(5);
    }

    /**
     * Parent name, when encoder is connected to an extender
     *
     * Generated from protobuf field <code>string extender = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setExtender($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * Indicates whether this encoder has been initialized or not. This
     * field cannot be modified using a standard
     * [`UpdateEncoder`][salto.nebula.encoder.v1.EncoderService.UpdateEncoder]
     * operation. To change the value of this field, you must call
     * [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder].
     * If the value is `false` also applies to the case where the
     * initialization process has been initiated but where it has not finished.
     *
     * Generated from protobuf field <code>bool initialized = 6;</code>
     * @return bool
     */
    public function getInitialized()
    {
        return $this->initialized;
    }

    /**
     * Indicates whether this encoder has been initialized or not. This
     * field cannot be modified using a standard
     * [`UpdateEncoder`][salto.nebula.encoder.v1.EncoderService.UpdateEncoder]
     * operation. To change the value of this field, you must call
     * [`InitializeEncoder`][salto.nebula.encoder.v1.EncoderService.InitializeEncoder].
     * If the value is `false` also applies to the case where the
     * initialization process has been initiated but where it has not finished.
     *
     * Generated from protobuf field <code>bool initialized = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setInitialized($var)
    {
        GPBUtil::checkBool($var);
        $this->initialized = $var;

        return $this;
    }

    /**
     * Device metadata contains information about a device hardware and firmware.
     *
     * Generated from protobuf field <code>.salto.nebula.type.DeviceMetadata device_metadata = 11;</code>
     * @return \Saltoapis\Nebula\Type\DeviceMetadata|null
     */
    public function getDeviceMetadata()
    {
        return $this->device_metadata;
    }

    public function hasDeviceMetadata()
    {
        return isset($this->device_metadata);
    }

    public function clearDeviceMetadata()
    {
        unset($this->device_metadata);
    }

    /**
     * Device metadata contains information about a device hardware and firmware.
     *
     * Generated from protobuf field <code>.salto.nebula.type.DeviceMetadata device_metadata = 11;</code>
     * @param \Saltoapis\Nebula\Type\DeviceMetadata $var
     * @return $this
     */
    public function setDeviceMetadata($var)
    {
        GPBUtil::checkMessage($var, \Saltoapis\Nebula\Type\DeviceMetadata::class);
        $this->device_metadata = $var;

        return $this;
    }

    /**
     * Indicates whether this encoder is connected or not. It's considered
     * connected if there has been at least one communication with it within the
     * last 10 minutes.
     *
     * Generated from protobuf field <code>bool connected = 7;</code>
     * @return bool
     */
    public function getConnected()
    {
        return $this->connected;
    }

    /**
     * Indicates whether this encoder is connected or not. It's considered
     * connected if there has been at least one communication with it within the
     * last 10 minutes.
     *
     * Generated from protobuf field <code>bool connected = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setConnected($var)
    {
        GPBUtil::checkBool($var);
        $this->connected = $var;

        return $this;
    }

    /**
     * The last time an event was received.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_event_time = 8;</code>
     * @return \Google\Protobuf\Timestamp|null
     */
    public function getLastEventTime()
    {
        return $this->last_event_time;
    }

    public function hasLastEventTime()
    {
        return isset($this->last_event_time);
    }

    public function clearLastEventTime()
    {
        unset($this->last_event_time);
    }

    /**
     * The last time an event was received.
     *
     * Generated from protobuf field <code>.google.protobuf.Timestamp last_event_time = 8;</code>
     * @param \Google\Protobuf\Timestamp $var
     * @return $this
     */
    public function setLastEventTime($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Timestamp::class);
        $this->last_event_time = $var;

        return $this;
    }

    /**
     * Indicates whether this encoder has pending updates or not. This could be
     * because there was a pending configuration or a firmware update and is
     * conditionally set based on the current installation settings.
     *
     * Generated from protobuf field <code>bool outdated = 9;</code>
     * @return bool
     */
    public function getOutdated()
    {
        return $this->outdated;
    }

    /**
     * Indicates whether this encoder has pending updates or not. This could be
     * because there was a pending configuration or a firmware update and is
     * conditionally set based on the current installation settings.
     *
     * Generated from protobuf field <code>bool outdated = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setOutdated($var)
    {
        GPBUtil::checkBool($var);
        $this->outdated = $var;

        return $this;
    }

    /**
     * Disables the sound emitted by the encoder during operation.
     *
     * Generated from protobuf field <code>bool disable_sound = 10;</code>
     * @return bool
     */
    public function getDisableSound()
    {
        return $this->disable_sound;
    }

    /**
     * Disables the sound emitted by the encoder during operation.
     *
     * Generated from protobuf field <code>bool disable_sound = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setDisableSound($var)
    {
        GPBUtil::checkBool($var);
        $this->disable_sound = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getParentDevice()
    {
        return $this->whichOneof("parent_device");
    }

}

