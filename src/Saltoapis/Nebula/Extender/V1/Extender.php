<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: salto/nebula/extender/v1/extender.proto

namespace Saltoapis\Nebula\Extender\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * The extender object
 *
 * Generated from protobuf message <code>salto.nebula.extender.v1.Extender</code>
 */
class Extender extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. Resource name of the extender. It must have the format of
     * `installations/{@*}extenders/*`. For example:
     * `installations/surelock-homes-hq/extenders/elementary`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    protected $name = '';
    /**
     * Display name of the extender.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     */
    protected $display_name = '';
    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, encoders and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     */
    protected $device_id = null;
    protected $parent_device;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. Resource name of the extender. It must have the format of
     *           `installations/{@*}extenders/*`. For example:
     *           `installations/surelock-homes-hq/extenders/elementary`.
     *     @type string $display_name
     *           Display name of the extender.
     *     @type string $device_id
     *           Globally unique identifier that is used across all devices manufactured
     *           by SALTO, including gateways, extenders, encoders and so on.
     *     @type string $gateway
     *           Parent name, when extender is connected to a gateway
     *     @type string $extender
     *           Parent name, when extender is connected to an extender
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Saltoapis\Nebula\Extender\V1\Extender::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. Resource name of the extender. It must have the format of
     * `installations/{@*}extenders/*`. For example:
     * `installations/surelock-homes-hq/extenders/elementary`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. Resource name of the extender. It must have the format of
     * `installations/{@*}extenders/*`. For example:
     * `installations/surelock-homes-hq/extenders/elementary`.
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Display name of the extender.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @return string
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * Display name of the extender.
     *
     * Generated from protobuf field <code>string display_name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDisplayName($var)
    {
        GPBUtil::checkString($var, True);
        $this->display_name = $var;

        return $this;
    }

    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, encoders and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     * @return string
     */
    public function getDeviceId()
    {
        return isset($this->device_id) ? $this->device_id : '';
    }

    public function hasDeviceId()
    {
        return isset($this->device_id);
    }

    public function clearDeviceId()
    {
        unset($this->device_id);
    }

    /**
     * Globally unique identifier that is used across all devices manufactured
     * by SALTO, including gateways, extenders, encoders and so on.
     *
     * Generated from protobuf field <code>optional string device_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_id = $var;

        return $this;
    }

    /**
     * Parent name, when extender is connected to a gateway
     *
     * Generated from protobuf field <code>string gateway = 4;</code>
     * @return string
     */
    public function getGateway()
    {
        return $this->readOneof(4);
    }

    public function hasGateway()
    {
        return $this->hasOneof(4);
    }

    /**
     * Parent name, when extender is connected to a gateway
     *
     * Generated from protobuf field <code>string gateway = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setGateway($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(4, $var);

        return $this;
    }

    /**
     * Parent name, when extender is connected to an extender
     *
     * Generated from protobuf field <code>string extender = 5;</code>
     * @return string
     */
    public function getExtender()
    {
        return $this->readOneof(5);
    }

    public function hasExtender()
    {
        return $this->hasOneof(5);
    }

    /**
     * Parent name, when extender is connected to an extender
     *
     * Generated from protobuf field <code>string extender = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setExtender($var)
    {
        GPBUtil::checkString($var, True);
        $this->writeOneof(5, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getParentDevice()
    {
        return $this->whichOneof("parent_device");
    }

}

