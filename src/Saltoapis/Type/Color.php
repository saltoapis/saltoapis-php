<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: salto/type/color.proto

namespace Saltoapis\Type;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Represents a color in the RGBA color space.
 * By default, applications should assume the sRGB color space.
 * When color equality needs to be decided, implementations, unless
 * documented otherwise, treat two colors as equal if all their red,
 * green, blue, and alpha values each differ by at most 1e-5.
 *
 * Generated from protobuf message <code>salto.type.Color</code>
 */
class Color extends \Google\Protobuf\Internal\Message
{
    /**
     * The amount of red in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float red = 1;</code>
     */
    protected $red = 0.0;
    /**
     * The amount of green in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float green = 2;</code>
     */
    protected $green = 0.0;
    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float blue = 3;</code>
     */
    protected $blue = 0.0;
    /**
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     *
     * Generated from protobuf field <code>optional float alpha = 4;</code>
     */
    protected $alpha = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type float $red
     *           The amount of red in the color as a value in the interval [0, 1].
     *     @type float $green
     *           The amount of green in the color as a value in the interval [0, 1].
     *     @type float $blue
     *           The amount of blue in the color as a value in the interval [0, 1].
     *     @type float $alpha
     *           The fraction of this color that should be applied to the pixel. That is,
     *           the final pixel color is defined by the equation:
     *             `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     *           This means that a value of 1.0 corresponds to a solid color, whereas
     *           a value of 0.0 corresponds to a completely transparent color.
     *           If omitted, this color object is rendered as a solid color
     *           (as if the alpha value had been explicitly given a value of 1.0).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Saltoapis\Type\Color::initOnce();
        parent::__construct($data);
    }

    /**
     * The amount of red in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float red = 1;</code>
     * @return float
     */
    public function getRed()
    {
        return $this->red;
    }

    /**
     * The amount of red in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float red = 1;</code>
     * @param float $var
     * @return $this
     */
    public function setRed($var)
    {
        GPBUtil::checkFloat($var);
        $this->red = $var;

        return $this;
    }

    /**
     * The amount of green in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float green = 2;</code>
     * @return float
     */
    public function getGreen()
    {
        return $this->green;
    }

    /**
     * The amount of green in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float green = 2;</code>
     * @param float $var
     * @return $this
     */
    public function setGreen($var)
    {
        GPBUtil::checkFloat($var);
        $this->green = $var;

        return $this;
    }

    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float blue = 3;</code>
     * @return float
     */
    public function getBlue()
    {
        return $this->blue;
    }

    /**
     * The amount of blue in the color as a value in the interval [0, 1].
     *
     * Generated from protobuf field <code>float blue = 3;</code>
     * @param float $var
     * @return $this
     */
    public function setBlue($var)
    {
        GPBUtil::checkFloat($var);
        $this->blue = $var;

        return $this;
    }

    /**
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     *
     * Generated from protobuf field <code>optional float alpha = 4;</code>
     * @return float
     */
    public function getAlpha()
    {
        return isset($this->alpha) ? $this->alpha : 0.0;
    }

    public function hasAlpha()
    {
        return isset($this->alpha);
    }

    public function clearAlpha()
    {
        unset($this->alpha);
    }

    /**
     * The fraction of this color that should be applied to the pixel. That is,
     * the final pixel color is defined by the equation:
     *   `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)`
     * This means that a value of 1.0 corresponds to a solid color, whereas
     * a value of 0.0 corresponds to a completely transparent color.
     * If omitted, this color object is rendered as a solid color
     * (as if the alpha value had been explicitly given a value of 1.0).
     *
     * Generated from protobuf field <code>optional float alpha = 4;</code>
     * @param float $var
     * @return $this
     */
    public function setAlpha($var)
    {
        GPBUtil::checkFloat($var);
        $this->alpha = $var;

        return $this;
    }

}

